[1mdiff --git a/src/add/example_buf_pipe.py b/src/add/example_buf_pipe.py[m
[1mindex 2604262..00eecc3 100644[m
[1m--- a/src/add/example_buf_pipe.py[m
[1m+++ b/src/add/example_buf_pipe.py[m
[36m@@ -203,7 +203,7 @@[m [mclass BufferedPipeline:[m
                ][m
 [m
 [m
[31m-class BufPipe(BufferedPipeline):[m
[32m+[m[32mclass ExampleBufPipe(BufferedPipeline):[m
 [m
     def __init__(self):[m
         BufferedPipeline.__init__(self)[m
[1mdiff --git a/src/add/nmigen_div_experiment.py b/src/add/nmigen_div_experiment.py[m
[1mindex eb0c935..e074c5c 100644[m
[1m--- a/src/add/nmigen_div_experiment.py[m
[1m+++ b/src/add/nmigen_div_experiment.py[m
[36m@@ -6,7 +6,7 @@[m [mfrom nmigen import Module, Signal, Const, Cat[m
 from nmigen.cli import main, verilog[m
 [m
 from fpbase import FPNumIn, FPNumOut, FPOp, Overflow, FPBase[m
[31m-from nmigen_add_experiment import FPState[m
[32m+[m[32mfrom nmigen_add_experiment import FPState, FPGetOp[m
 [m
 class Div:[m
     def __init__(self, width):[m
[36m@@ -66,14 +66,26 @@[m [mclass FPDIV(FPBase):[m
             # ******[m
             # gets operand a[m
 [m
[32m+[m[32m            geta = FPGetOp("get_a", "get_b", self.in_a, self.width)[m
[32m+[m[32m            geta.setup(m, self.in_a)[m
[32m+[m
             with m.State("get_a"):[m
[31m-                self.get_op(m, self.in_a, a, "get_b")[m
[32m+[m[32m                geta.action(m)[m
[32m+[m[32m                with m.If(geta.out_decode):[m
[32m+[m[32m                    m.d.sync += a.decode(self.in_a.v)[m
[32m+[m[32m                #self.get_op(m, self.in_a, a, "get_b")[m
 [m
             # ******[m
             # gets operand b[m
 [m
[32m+[m[32m            getb = FPGetOp("get_b", "special_cases", self.in_b, self.width)[m
[32m+[m[32m            getb.setup(m, self.in_b)[m
[32m+[m
             with m.State("get_b"):[m
[31m-                self.get_op(m, self.in_b, b, "special_cases")[m
[32m+[m[32m                getb.action(m)[m
[32m+[m[32m                with m.If(getb.out_decode):[m
[32m+[m[32m                    m.d.sync += b.decode(self.in_b.v)[m
[32m+[m[32m                #self.get_op(m, self.in_b, b, "special_cases")[m
 [m
             # ******[m
             # special cases: NaNs, infs, zeros, denormalised[m
[1mdiff --git a/src/add/test_buf_pipe.py b/src/add/test_buf_pipe.py[m
[1mindex 2a06893..fa23eac 100644[m
[1m--- a/src/add/test_buf_pipe.py[m
[1m+++ b/src/add/test_buf_pipe.py[m
[36m@@ -1,6 +1,6 @@[m
 from nmigen import Module, Signal[m
 from nmigen.compat.sim import run_simulation[m
[31m-from example_buf_pipe import BufPipe[m
[32m+[m[32mfrom example_buf_pipe import ExampleBufPipe[m
 from random import randint[m
 [m
 [m
[36m@@ -171,7 +171,7 @@[m [mdef testbench4(dut):[m
                 break[m
 [m
 [m
[31m-class BufPipe2:[m
[32m+[m[32mclass ExampleBufPipe2:[m
     """[m
         connect these:  ------|---------------|[m
                               v               v[m
[36m@@ -180,8 +180,8 @@[m [mclass BufPipe2:[m
         stage.i_data   >>in  pipe1 o_data   out>> stage.i_data   >>in  pipe2[m
     """[m
     def __init__(self):[m
[31m-        self.pipe1 = BufPipe()[m
[31m-        self.pipe2 = BufPipe()[m
[32m+[m[32m        self.pipe1 = ExampleBufPipe()[m
[32m+[m[32m        self.pipe2 = ExampleBufPipe()[m
 [m
         # input[m
         self.i_p_valid = Signal()    # >>in - comes in from PREVIOUS stage[m
[36m@@ -217,18 +217,18 @@[m [mclass BufPipe2:[m
 [m
 if __name__ == '__main__':[m
     print ("test 1")[m
[31m-    dut = BufPipe()[m
[32m+[m[32m    dut = ExampleBufPipe()[m
     run_simulation(dut, testbench(dut), vcd_name="test_bufpipe.vcd")[m
 [m
     print ("test 2")[m
[31m-    dut = BufPipe2()[m
[32m+[m[32m    dut = ExampleBufPipe2()[m
     run_simulation(dut, testbench2(dut), vcd_name="test_bufpipe2.vcd")[m
 [m
     print ("test 3")[m
[31m-    dut = BufPipe()[m
[32m+[m[32m    dut = ExampleBufPipe()[m
     test = Test3(dut)[m
     run_simulation(dut, [test.send, test.rcv], vcd_name="test_bufpipe3.vcd")[m
 [m
     print ("test 4")[m
[31m-    dut = BufPipe2()[m
[32m+[m[32m    dut = ExampleBufPipe2()[m
     run_simulation(dut, testbench4(dut), vcd_name="test_bufpipe4.vcd")[m
[1mdiff --git a/src/add/test_inputgroup.py b/src/add/test_inputgroup.py[m
[1mindex ca8523d..bb68861 100644[m
[1m--- a/src/add/test_inputgroup.py[m
[1m+++ b/src/add/test_inputgroup.py[m
[36m@@ -99,9 +99,81 @@[m [mdef testbench(dut):[m
     assert out_mid == 3, "out mid %d" % out_mid[m
 [m
 [m
[32m+[m[32mclass InputTest:[m
[32m+[m[32m    def __init__(self, dut):[m
[32m+[m[32m        self.dut = dut[m
[32m+[m[32m        self.di = {}[m
[32m+[m[32m        self.do = {}[m
[32m+[m[32m        self.tlen = 10[m
[32m+[m[32m        for mid in range(dut.num_rows):[m
[32m+[m[32m            self.di[mid] = {}[m
[32m+[m[32m            self.do[mid] = {}[m
[32m+[m[32m            for i in range(self.tlen):[m
[32m+[m[32m                self.di[mid][i] = randint(0, 100)[m
[32m+[m[32m                self.do[mid][i] = self.di[mid][i][m
[32m+[m
[32m+[m[32m    def send(self, mid):[m
[32m+[m[32m        for i in range(self.tlen):[m
[32m+[m[32m            op2 = self.di[mid][i][m
[32m+[m[32m            rs = dut.rs[mid][m
[32m+[m[32m            ack = yield rs.ack[m
[32m+[m[32m            while not ack:[m
[32m+[m[32m                yield[m
[32m+[m[32m                ack = yield rs.ack[m
[32m+[m[32m            yield rs.in_op[0].eq(i)[m
[32m+[m[32m            yield rs.in_op[1].eq(op2)[m
[32m+[m[32m            yield rs.stb.eq(0b11) # strobe indicate 1st op ready[m
[32m+[m[32m            ack = yield rs.ack[m
[32m+[m[32m            while ack:[m
[32m+[m[32m                yield[m
[32m+[m[32m                ack = yield rs.ack[m
[32m+[m[32m            yield rs.stb.eq(0)[m
[32m+[m
[32m+[m[32m            # wait random period of time before queueing another value[m
[32m+[m[32m            for i in range(randint(0, 12)):[m
[32m+[m[32m                yield[m
[32m+[m
[32m+[m[32m    def recv(self):[m
[32m+[m[32m        while True:[m
[32m+[m[32m            stb = yield dut.out_op.stb[m
[32m+[m[32m            yield dut.out_op.ack.eq(0)[m
[32m+[m[32m            while not stb:[m
[32m+[m[32m                yield[m
[32m+[m[32m                stb = yield dut.out_op.stb[m
[32m+[m
[32m+[m[32m            yield dut.out_op.ack.eq(1)[m
[32m+[m[32m            stb = yield dut.out_op.stb[m
[32m+[m[32m            while stb:[m
[32m+[m[32m                yield[m
[32m+[m[32m                stb = yield dut.out_op.stb[m
[32m+[m[32m            mid = yield dut.mid[m
[32m+[m[32m            out_i = yield dut.out_op.v[0][m
[32m+[m[32m            out_v = yield dut.out_op.v[1][m
[32m+[m
[32m+[m[32m            # see if this output has occurred already, delete it if it has[m
[32m+[m[32m            assert out_i in self.do[mid][m
[32m+[m[32m            assert self.do[mid][out_i] == out_v[m
[32m+[m[32m            del self.do[mid][out_i][m
[32m+[m
[32m+[m[32m            # check if there's any more outputs[m
[32m+[m[32m            zerolen = True[m
[32m+[m[32m            for (k, v) in self.do.items():[m
[32m+[m[32m                if v:[m
[32m+[m[32m                    zerolen = False[m
[32m+[m[32m            if zerolen:[m
[32m+[m[32m                break[m
[32m+[m
 if __name__ == '__main__':[m
     dut = InputGroup(width=32)[m
     vl = rtlil.convert(dut, ports=dut.ports())[m
     with open("test_inputgroup.il", "w") as f:[m
         f.write(vl)[m
     run_simulation(dut, testbench(dut), vcd_name="test_inputgroup.vcd")[m
[32m+[m
[32m+[m[32m    dut = InputGroup(width=16)[m
[32m+[m[32m    test = InputTest(dut)[m
[32m+[m[32m    run_simulation(dut, [test.send(3), test.send(2),[m
[32m+[m[32m                         test.send(1), test.send(0),[m
[32m+[m[32m                  [1mdiff --git a/src/add/example_buf_pipe.py b/src/add/example_buf_pipe.py[m
[1mindex 2604262..00eecc3 100644[m
[1m--- a/src/add/example_buf_pipe.py[m
[1m+++ b/src/add/example_buf_pipe.py[m
[36m@@ -203,7 +203,7 @@[m [mclass BufferedPipeline:[m
                ][m
 [m
 [m
[31m-class BufPipe(BufferedPipeline):[m
[32m+[m[32mclass ExampleBufPipe(BufferedPipeline):[m
 [m
     def __init__(self):[m
         BufferedPipeline.__init__(self)[m
[1mdiff --git a/src/add/nmigen_div_experiment.py b/src/add/nmigen_div_experiment.py[m
[1mindex eb0c935..e074c5c 100644[m
[1m--- a/src/add/nmigen_div_experiment.py[m
[1m+++ b/src/add/nmigen_div_experiment.py[m
[36m@@ -6,7 +6,7 @@[m [mfrom nmigen import Module, Signal, Const, Cat[m
 from nmigen.cli import main, verilog[m
 [m
 from fpbase import FPNumIn, FPNumOut, FPOp, Overflow, FPBase[m
[31m-from nmigen_add_experiment import FPState[m
[32m+[m[32mfrom nmigen_add_experiment import FPState, FPGetOp[m
 [m
 class Div:[m
     def __init__(self, width):[m
[36m@@ -66,14 +66,26 @@[m [mclass FPDIV(FPBase):[m
             # ******[m
             # gets operand a[m
 [m
[32m+[m[32m            geta = FPGetOp("get_a", "get_b", self.in_a, self.width)[m
[32m+[m[32m            geta.setup(m, self.in_a)[m
[32m+[m
             with m.State("get_a"):[m
[31m-                self.get_op(m, self.in_a, a, "get_b")[m
[32m+[m[32m                geta.action(m)[m
[32m+[m[32m                with m.If(geta.out_decode):[m
[32m+[m[32m                    m.d.sync += a.decode(self.in_a.v)[m
[32m+[m[32m                #self.get_op(m, self.in_a, a, "get_b")[m
 [m
             # ******[m
             # gets operand b[m
 [m
[32m+[m[32m            getb = FPGetOp("get_b", "special_cases", self.in_b, self.width)[m
[32m+[m[32m            getb.setup(m, self.in_b)[m
[32m+[m
             with m.State("get_b"):[m
[31m-                self.get_op(m, self.in_b, b, "special_cases")[m
[32m+[m[32m                getb.action(m)[m
[32m+[m[32m                with m.If(getb.out_decode):[m
[32m+[m[32m                    m.d.sync += b.decode(self.in_b.v)[m
[32m+[m[32m                #self.get_op(m, self.in_b, b, "special_cases")[m
 [m
             # ******[m
             # special cases: NaNs, infs, zeros, denormalised[m
[1mdiff --git a/src/add/test_buf_pipe.py b/src/add/test_buf_pipe.py[m
[1mindex 2a06893..fa23eac 100644[m
[1m--- a/src/add/test_buf_pipe.py[m
[1m+++ b/src/add/test_buf_pipe.py[m
[36m@@ -1,6 +1,6 @@[m
 from nmigen import Module, Signal[m
 from nmigen.compat.sim import run_simulation[m
[31m-from example_buf_pipe import BufPipe[m
[32m+[m[32mfrom example_buf_pipe import ExampleBufPipe[m
 from random import randint[m
 [m
 [m
[36m@@ -171,7 +171,7 @@[m [mdef testbench4(dut):[m
                 break[m
 [m
 [m
[31m-class BufPipe2:[m
[32m+[m[32mclass ExampleBufPipe2:[m
     """[m
         connect these:  ------|---------------|[m
                               v               v[m
[36m@@ -180,8 +180,8 @@[m [mclass BufPipe2:[m
         stage.i_data   >>in  pipe1 o_data   out>> stage.i_data   >>in  pipe2[m
     """[m
     def __init__(self):[m
[31m-        self.pipe1 = BufPipe()[m
[31m-        self.pipe2 = BufPipe()[m
[32m+[m[32m        self.pipe1 = ExampleBufPipe()[m
[32m+[m[32m        self.pipe2 = ExampleBufPipe()[m
 [m
         # input[m
         self.i_p_valid = Signal()    # >>in - comes in from PREVIOUS stage[m
[36m@@ -217,18 +217,18 @@[m [mclass BufPipe2:[m
 [m
 if __name__ == '__main__':[m
     print ("test 1")[m
[31m-    dut = BufPipe()[m
[32m+[m[32m    dut = ExampleBufPipe()[m
     run_simulation(dut, testbench(dut), vcd_name="test_bufpipe.vcd")[m
 [m
     print ("test 2")[m
[31m-    dut = BufPipe2()[m
[32m+[m[32m    dut = ExampleBufPipe2()[m
     run_simulation(dut, testbench2(dut), vcd_name="test_bufpipe2.vcd")[m
 [m
     print ("test 3")[m
[31m-    dut = BufPipe()[m
[32m+[m[32m    dut = ExampleBufPipe()[m
     test = Test3(dut)[m
     run_simulation(dut, [test.send, test.rcv], vcd_name="test_bufpipe3.vcd")[m
 [m
     print ("test 4")[m
[31m-    dut = BufPipe2()[m
[32m+[m[32m    dut = ExampleBufPipe2()[m
     run_simulation(dut, testbench4(dut), vcd_name="test_bufpipe4.vcd")[m
[1mdiff --git a/src/add/test_inputgroup.py b/src/add/test_inputgroup.py[m
[1mindex ca8523d..bb68861 100644[m
[1m--- a/src/add/test_inputgroup.py[m
[1m+++ b/src/add/test_inputgroup.py[m
[36m@@ -99,9 +99,81 @@[m [mdef testbench(dut):[m
     assert out_mid == 3, "out mid %d" % out_mid[m
 [m
 [m
[32m+[m[32mclass InputTest:[m
[32m+[m[32m    def __init__(self, dut):[m
[32m+[m[32m        self.dut = dut[m
[32m+[m[32m        self.di = {}[m
[32m+[m[32m        self.do = {}[m
[32m+[m[32m        self.tlen = 10[m
[32m+[m[32m        for mid in range(dut.num_rows):[m
[32m+[m[32m            self.di[mid] = {}[m
[32m+[m[32m            self.do[mid] = {}[m
[32m+[m[32m            for i in range(self.tlen):[m
[32m+[m[32m                self.di[mid][i] = randint(0, 100)[m
[32m+[m[32m                self.do[mid][i] = self.di[mid][i][m
[32m+[m
[32m+[m[32m    def send(self, mid):[m
[32m+[m[32m        for i in range(self.tlen):[m
[32m+[m[32m            op2 = self.di[mid][i][m
[32m+[m[32m            rs = dut.rs[mid][m
[32m+[m[32m            ack = yield rs.ack[m
[32m+[m[32m            while not ack:[m
[32m+[m[32m                yield[m
[32m+[m[32m                ack = yield rs.ack[m
[32m+[m[32m            yield rs.in_op[0].eq(i)[m
[32m+[m[32m            yield rs.in_op[1].eq(op2)[m
[32m+[m[32m            yield rs.stb.eq(0b11) # strobe indicate 1st op ready[m
[32m+[m[32m            ack = yield rs.ack[m
[32m+[m[32m            while ack:[m
[32m+[m[32m                yield[m
[32m+[m[32m                ack = yield rs.ack[m
[32m+[m[32m            yield rs.stb.eq(0)[m
[32m+[m
[32m+[m[32m            # wait random period of time before queueing another value[m
[32m+[m[32m            for i in range(randint(0, 12)):[m
[32m+[m[32m                yield[m
[32m+[m
[32m+[m[32m    def recv(self):[m
[32m+[m[32m        while True:[m
[32m+[m[32m            stb = yield dut.out_op.stb[m
[32m+[m[32m            yield dut.out_op.ack.eq(0)[m
[32m+[m[32m            while not stb:[m
[32m+[m[32m                yield[m
[32m+[m[32m                stb = yield dut.out_op.stb[m
[32m+[m
[32m+[m[32m            yield dut.out_op.ack.eq(1)[m
[32m+[m[32m            stb = yield dut.out_op.stb[m
[32m+[m[32m            while stb:[m
[32m+[m[32m                yield[m
[32m+[m[32m                stb = yield dut.out_op.stb[m
[32m+[m[32m            mid = yield dut.mid[m
[32m+[m[32m            out_i = yield dut.out_op.v[0][m
[32m+[m[32m            out_v = yield dut.out_op.v[1][m
[32m+[m
[32m+[m[32m            # see if this output has occurred already, delete it if it has[m
[32m+[m[32m            assert out_i in self.do[mid][m
[32m+[m[32m            assert self.do[mid][out_i] == out_v[m
[32m+[m[32m            del self.do[mid][out_i][m
[32m+[m
[32m+[m[32m            # check if there's any more outputs[m
[32m+[m[32m            zerolen = True[m
[32m+[m[32m            for (k, v) in self.do.items():[m
[32m+[m[32m                if v:[m
[32m+[m[32m                    zerolen = False[m
[32m+[m[32m            if zerolen:[m
[32m+[m[32m                break[m
[32m+[m
 if __name__ == '__main__':[m
     dut = InputGroup(width=32)[m
     vl = rtlil.convert(dut, ports=dut.ports())[m
     with open("test_inputgroup.il", "w") as f:[m
         f.write(vl)[m
     run_simulation(dut, testbench(dut), vcd_name="test_inputgroup.vcd")[m
[32m+[m
[32m+[m[32m    dut = InputGroup(width=16)[m
[32m+[m[32m    test = InputTest(dut)[m
[32m+[m[32m    run_simulation(dut, [test.send(3), test.send(2),[m
[32m+[m[32m                         test.send(1), test.send(0),[m
[32m+[m[32m                         test.recv()],[m
[32m+[m[32m                   vcd_name="test_inputgroup_parallel.vcd")[m
[41m+[m
[1mdiff --git a/src/add/example_buf_pipe.py b/src/add/example_buf_pipe.py[m
[1mindex 2604262..00eecc3 100644[m
[1m--- a/src/add/example_buf_pipe.py[m
[1m+++ b/src/add/example_buf_pipe.py[m
[36m@@ -203,7 +203,7 @@[m [mclass BufferedPipeline:[m
                ][m
 [m
 [m
[31m-class BufPipe(BufferedPipeline):[m
[32m+[m[32mclass ExampleBufPipe(BufferedPipeline):[m
 [m
     def __init__(self):[m
         BufferedPipeline.__init__(self)[m
[1mdiff --git a/src/add/fmul.py b/src/add/fmul.py[m
[1mindex 130d49e..5b6da94 100644[m
[1m--- a/src/add/fmul.py[m
[1m+++ b/src/add/fmul.py[m
[36m@@ -2,7 +2,8 @@[m [mfrom nmigen import Module, Signal, Cat, Mux, Array, Const[m
 from nmigen.cli import main, verilog[m
 [m
 from fpbase import FPNumIn, FPNumOut, FPOp, Overflow, FPBase[m
[31m-from nmigen_add_experiment import FPState[m
[32m+[m[32m+from nmigen_add_experiment import FPState, FPGetOp[m
[32m+[m
 [m
 class FPMUL(FPBase):[m
 [m
[1mdiff --git a/src/add/nmigen_div_experiment.py b/src/add/nmigen_div_experiment.py[m
[1mindex eb0c935..e074c5c 100644[m
[1m--- a/src/add/nmigen_div_experiment.py[m
[1m+++ b/src/add/nmigen_div_experiment.py[m
[36m@@ -6,7 +6,7 @@[m [mfrom nmigen import Module, Signal, Const, Cat[m
 from nmigen.cli import main, verilog[m
 [m
 from fpbase import FPNumIn, FPNumOut, FPOp, Overflow, FPBase[m
[31m-from nmigen_add_experiment import FPState[m
[32m+[m[32mfrom nmigen_add_experiment import FPState, FPGetOp[m
 [m
 class Div:[m
     def __init__(self, width):[m
[36m@@ -66,14 +66,26 @@[m [mclass FPDIV(FPBase):[m
             # ******[m
             # gets operand a[m
 [m
[32m+[m[32m            geta = FPGetOp("get_a", "get_b", self.in_a, self.width)[m
[32m+[m[32m            geta.setup(m, self.in_a)[m
[32m+[m
             with m.State("get_a"):[m
[31m-                self.get_op(m, self.in_a, a, "get_b")[m
[32m+[m[32m                geta.action(m)[m
[32m+[m[32m                with m.If(geta.out_decode):[m
[32m+[m[32m                    m.d.sync += a.decode(self.in_a.v)[m
[32m+[m[32m                #self.get_op(m, self.in_a, a, "get_b")[m
 [m
             # ******[m
             # gets operand b[m
 [m
[32m+[m[32m            getb = FPGetOp("get_b", "special_cases", self.in_b, self.width)[m
[32m+[m[32m            getb.setup(m, self.in_b)[m
[32m+[m
             with m.State("get_b"):[m
[31m-                self.get_op(m, self.in_b, b, "special_cases")[m
[32m+[m[32m                getb.action(m)[m
[32m+[m[32m                with m.If(getb.out_decode):[m
[32m+[m[32m                    m.d.sync += b.decode(self.in_b.v)[m
[32m+[m[32m                #self.get_op(m, self.in_b, b, "special_cases")[m
 [m
             # ******[m
             # special cases: NaNs, infs, zeros, denormalised[m
[1mdiff --git a/src/add/test_buf_pipe.py b/src/add/test_buf_pipe.py[m
[1mindex 2a06893..fa23eac 100644[m
[1m--- a/src/add/test_buf_pipe.py[m
[1m+++ b/src/add/test_buf_pipe.py[m
[36m@@ -1,6 +1,6 @@[m
 from nmigen import Module, Signal[m
 from nmigen.compat.sim import run_simulation[m
[31m-from example_buf_pipe import BufPipe[m
[32m+[m[32mfrom example_buf_pipe import ExampleBufPipe[m
 from random import randint[m
 [m
 [m
[36m@@ -171,7 +171,7 @@[m [mdef testbench4(dut):[m
                 break[m
 [m
 [m
[31m-class BufPipe2:[m
[32m+[m[32mclass ExampleBufPipe2:[m
     """[m
         connect these:  ------|---------------|[m
                               v               v[m
[36m@@ -180,8 +180,8 @@[m [mclass BufPipe2:[m
         stage.i_data   >>in  pipe1 o_data   out>> stage.i_data   >>in  pipe2[m
     """[m
     def __init__(self):[m
[31m-        self.pipe1 = BufPipe()[m
[31m-        self.pipe2 = BufPipe()[m
[32m+[m[32m        self.pipe1 = ExampleBufPipe()[m
[32m+[m[32m        self.pipe2 = ExampleBufPipe()[m
 [m
         # input[m
         self.i_p_valid = Signal()    # >>in - comes in from PREVIOUS stage[m
[36m@@ -217,18 +217,18 @@[m [mclass BufPipe2:[m
 [m
 if __name__ == '__main__':[m
     print ("test 1")[m
[31m-    dut = BufPipe()[m
[32m+[m[32m    dut = ExampleBufPipe()[m
     run_simulation(dut, testbench(dut), vcd_name="test_bufpipe.vcd")[m
 [m
     print ("test 2")[m
[31m-    dut = BufPipe2()[m
[32m+[m[32m    dut = ExampleBufPipe2()[m
     run_simulation(dut, testbench2(dut), vcd_name="test_bufpipe2.vcd")[m
 [m
     print ("test 3")[m
[31m-    dut = BufPipe()[m
[32m+[m[32m    dut = ExampleBufPipe()[m
     test = Test3(dut)[m
     run_simulation(dut, [test.send, test.rcv], vcd_name="test_bufpipe3.vcd")[m
 [m
     print ("test 4")[m
[31m-    dut = BufPipe2()[m
[32m+[m[32m    dut = ExampleBufPipe2()[m
     run_simulation(dut, testbench4(dut), vcd_name="test_bufpipe4.vcd")[m
[1mdiff --git a/src/add/test_inputgroup.py b/src/add/test_inputgroup.py[m
[1mindex ca8523d..bb68861 100644[m
[1m--- a/src/add/test_inputgroup.py[m
[1m+++ b/src/add/test_inputgroup.py[m
[36m@@ -99,9 +99,81 @@[m [mdef testbench(dut):[m
     assert out_mid == 3, "out mid %d" % out_mid[m
 [m
 [m
[32m+[m[32mclass InputTest:[m
[32m+[m[32m    def __init__(self, dut):[m
[32m+[m[32m        self.dut = dut[m
[32m+[m[32m        self.di = {}[m
[32m+[m[32m        self.do = {}[m
[32m+[m[32m        self.tlen = 10[m
[32m+[m[32m        for mid in range(dut.num_rows):[m
[32m+[m[32m            self.di[mid] = {}[m
[32m+[m[32m            self.do[mid] = {}[m
[32m+[m[32m            for i in range(self.tlen):[m
[32m+[m[32m                self.di[mid][i] = randint(0, 100)[m
[32m+[m[32m                self.do[mid][i] = self.di[mid][i][m
[32m+[m
[32m+[m[32m    def send(self, mid):[m
[32m+[m[32m        for i in range(self.tlen):[m
[32m+[m[32m            op2 = self.di[mid][i][m
[32m+[m[32m            rs = dut.rs[mid][m
[32m+[m[32m            ack = yield rs.ack[m
[32m+[m[32m            while not ack:[m
[32m+[m[32m                yield[m
[32m+[m[32m                ack = yield rs.ack[m
[32m+[m[32m            yield rs.in_op[0].eq(i)[m
[32m+[m[32m            yield rs.in_op[1].eq(op2)[m
[32m+[m[32m            yield rs.stb.eq(0b11) # strobe indicate 1st op ready[m
[32m+[m[32m            ack = yield rs.ack[m
[32m+[m[32m            while ack:[m
[32m+[m[32m                yield[m
[32m+[m[32m                ack = yield rs.ack[m
[32m+[m[32m            yield rs.stb.eq(0)[m
[32m+[m
[32m+[m[32m            # wait random period of time before queueing another value[m
[32m+[m[32m            for i in range(randint(0, 12)):[m
[32m+[m[32m                yield[m
[32m+[m
[32m+[m[32m    def recv(self):[m
[32m+[m[32m        while True:[m
[32m+[m[32m            stb = yield dut.out_op.stb[m
[32m+[m[32m            yield dut.out_op.ack.eq(0)[m
[32m+[m[32m            while not stb:[m
[32m+[m[32m                yield[m
[32m+[m[32m                stb = yield dut.out_op.stb[m
[32m+[m
[32m+[m[32m            yield dut.out_op.ack.eq(1)[m
[32m+[m[32m            stb = yield dut.out_op.stb[m
[32m+[m[32m            while stb:[m
[32m+[m[32m                yield[m
[32m+[m[32m                stb = yield dut.out_op.stb[m
[32m+[m[32m            mid = yield dut.mid[m
[32m+[m[32m            out_i = yield dut.out_op.v[0][m
[32m+[m[32m            out_v = yield dut.out_op.v[1][m
[32m+[m
[32m+[m[32m            # see if this output has occurred already, delete it if it has[m
[32m+[m[32m            assert out_i in self.do[mid][m
[32m+[m[32m            assert self.do[mid][out_i] == out_v[m
[32m+[m[32m            del self.do[mid][out_i][m
[32m+[m
[32m+[m[32m            # check if there's any more outputs[m
[32m+[m[32m            zerolen = True[m
[32m+[m[32m            for (k, v) in self.do.items():[m
[32m+[m[32m                if v:[m
[32m+[m[32m                    zerolen = False[m
[32m+[m[32m            if zerolen:[m
[32m+[m[32m                break[m
[32m+[m
 if __name__ == '__main__':[m
     dut = InputGroup(width=32)[m
     vl = rtlil.convert(dut, ports=dut.ports())[m
     with open("test_inputgroup.il", "w") as f:[m
         f.write(vl)[m
     run_simulation(dut, testbench(dut), vcd_name="test_inputgroup.vcd")[m
[32m+[m
[32m+[m[32m    dut = InputGroup(width=16)[m
[32m+[m[32m    test = InputTest(dut)[m
[32m+[m[32m    run_simulation(dut, [test.send(3), test.send(2),[m
[32m+[m[32m                         test.send(1), test.send(0),[m
[32m+[m[32m                         test.recv()],[m
[32m+[m[32m                   vcd_name="test_inputgroup_parallel.vcd")[m
[41m+[m
